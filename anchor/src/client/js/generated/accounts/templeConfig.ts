/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from 'gill';
import {
  getIncenseTypeDecoder,
  getIncenseTypeEncoder,
  type IncenseType,
  type IncenseTypeArgs,
} from '../types';

export const TEMPLE_CONFIG_DISCRIMINATOR = new Uint8Array([
  27, 116, 7, 67, 209, 48, 108, 209,
]);

export function getTempleConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    TEMPLE_CONFIG_DISCRIMINATOR
  );
}

export type TempleConfig = {
  discriminator: ReadonlyUint8Array;
  index: number;
  owner: Address;
  treasury: Address;
  incenseTypes: Array<IncenseType>;
  incensePoints: bigint;
  merit: bigint;
  level: number;
};

export type TempleConfigArgs = {
  index: number;
  owner: Address;
  treasury: Address;
  incenseTypes: Array<IncenseTypeArgs>;
  incensePoints: number | bigint;
  merit: number | bigint;
  level: number;
};

export function getTempleConfigEncoder(): Encoder<TempleConfigArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['index', getU16Encoder()],
      ['owner', getAddressEncoder()],
      ['treasury', getAddressEncoder()],
      ['incenseTypes', getArrayEncoder(getIncenseTypeEncoder())],
      ['incensePoints', getU64Encoder()],
      ['merit', getU64Encoder()],
      ['level', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: TEMPLE_CONFIG_DISCRIMINATOR })
  );
}

export function getTempleConfigDecoder(): Decoder<TempleConfig> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['index', getU16Decoder()],
    ['owner', getAddressDecoder()],
    ['treasury', getAddressDecoder()],
    ['incenseTypes', getArrayDecoder(getIncenseTypeDecoder())],
    ['incensePoints', getU64Decoder()],
    ['merit', getU64Decoder()],
    ['level', getU8Decoder()],
  ]);
}

export function getTempleConfigCodec(): Codec<TempleConfigArgs, TempleConfig> {
  return combineCodec(getTempleConfigEncoder(), getTempleConfigDecoder());
}

export function decodeTempleConfig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<TempleConfig, TAddress>;
export function decodeTempleConfig<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<TempleConfig, TAddress>;
export function decodeTempleConfig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<TempleConfig, TAddress> | MaybeAccount<TempleConfig, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getTempleConfigDecoder()
  );
}

export async function fetchTempleConfig<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<TempleConfig, TAddress>> {
  const maybeAccount = await fetchMaybeTempleConfig(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeTempleConfig<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<TempleConfig, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeTempleConfig(maybeAccount);
}

export async function fetchAllTempleConfig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<TempleConfig>[]> {
  const maybeAccounts = await fetchAllMaybeTempleConfig(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeTempleConfig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<TempleConfig>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeTempleConfig(maybeAccount));
}
