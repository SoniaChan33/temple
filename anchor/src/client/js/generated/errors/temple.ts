/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from 'gill';
import { TEMPLE_PROGRAM_ADDRESS } from '../programs';

/** InvalidOwner: Input account owner is not the program address */
export const TEMPLE_ERROR__INVALID_OWNER = 0x1770; // 6000
/** MathOverflow: Math overflow */
export const TEMPLE_ERROR__MATH_OVERFLOW = 0x1771; // 6001
/** InvalidIncenseId: Invalid incense ID */
export const TEMPLE_ERROR__INVALID_INCENSE_ID = 0x1772; // 6002
/** InsufficientSolBalance: Insufficient SOL balance to pay for incense */
export const TEMPLE_ERROR__INSUFFICIENT_SOL_BALANCE = 0x1773; // 6003
/** InvalidTempleTreasury: Temple treasury account mismatch */
export const TEMPLE_ERROR__INVALID_TEMPLE_TREASURY = 0x1774; // 6004
/** DailyIncenseLimitExceeded: Daily incense limit exceeded */
export const TEMPLE_ERROR__DAILY_INCENSE_LIMIT_EXCEEDED = 0x1775; // 6005
/** InvalidAmount: Invalid Amount */
export const TEMPLE_ERROR__INVALID_AMOUNT = 0x1776; // 6006
/** ExceedDailyIncenseLimit: Exceed daily incense limit */
export const TEMPLE_ERROR__EXCEED_DAILY_INCENSE_LIMIT = 0x1777; // 6007
/** InsufficientIncenseBalance: Insufficient incense balance */
export const TEMPLE_ERROR__INSUFFICIENT_INCENSE_BALANCE = 0x1778; // 6008
/** DonationOnlyIncense: This incense type is only available through donations */
export const TEMPLE_ERROR__DONATION_ONLY_INCENSE = 0x1779; // 6009
/** SpecialEffectFailed: Failed to trigger special effect */
export const TEMPLE_ERROR__SPECIAL_EFFECT_FAILED = 0x177a; // 6010

export type TempleError =
  | typeof TEMPLE_ERROR__DAILY_INCENSE_LIMIT_EXCEEDED
  | typeof TEMPLE_ERROR__DONATION_ONLY_INCENSE
  | typeof TEMPLE_ERROR__EXCEED_DAILY_INCENSE_LIMIT
  | typeof TEMPLE_ERROR__INSUFFICIENT_INCENSE_BALANCE
  | typeof TEMPLE_ERROR__INSUFFICIENT_SOL_BALANCE
  | typeof TEMPLE_ERROR__INVALID_AMOUNT
  | typeof TEMPLE_ERROR__INVALID_INCENSE_ID
  | typeof TEMPLE_ERROR__INVALID_OWNER
  | typeof TEMPLE_ERROR__INVALID_TEMPLE_TREASURY
  | typeof TEMPLE_ERROR__MATH_OVERFLOW
  | typeof TEMPLE_ERROR__SPECIAL_EFFECT_FAILED;

let templeErrorMessages: Record<TempleError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  templeErrorMessages = {
    [TEMPLE_ERROR__DAILY_INCENSE_LIMIT_EXCEEDED]: `Daily incense limit exceeded`,
    [TEMPLE_ERROR__DONATION_ONLY_INCENSE]: `This incense type is only available through donations`,
    [TEMPLE_ERROR__EXCEED_DAILY_INCENSE_LIMIT]: `Exceed daily incense limit`,
    [TEMPLE_ERROR__INSUFFICIENT_INCENSE_BALANCE]: `Insufficient incense balance`,
    [TEMPLE_ERROR__INSUFFICIENT_SOL_BALANCE]: `Insufficient SOL balance to pay for incense`,
    [TEMPLE_ERROR__INVALID_AMOUNT]: `Invalid Amount`,
    [TEMPLE_ERROR__INVALID_INCENSE_ID]: `Invalid incense ID`,
    [TEMPLE_ERROR__INVALID_OWNER]: `Input account owner is not the program address`,
    [TEMPLE_ERROR__INVALID_TEMPLE_TREASURY]: `Temple treasury account mismatch`,
    [TEMPLE_ERROR__MATH_OVERFLOW]: `Math overflow`,
    [TEMPLE_ERROR__SPECIAL_EFFECT_FAILED]: `Failed to trigger special effect`,
  };
}

export function getTempleErrorMessage(code: TempleError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (templeErrorMessages as Record<TempleError, string>)[code];
  }

  return 'Error message not available in production bundles.';
}

export function isTempleError<TProgramErrorCode extends TempleError>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    TEMPLE_PROGRAM_ADDRESS,
    code
  );
}
