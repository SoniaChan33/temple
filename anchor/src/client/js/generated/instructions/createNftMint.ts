/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { TEMPLE_PROGRAM_ADDRESS } from '../programs';
import {
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CREATE_NFT_MINT_DISCRIMINATOR = new Uint8Array([
  220, 240, 28, 248, 182, 238, 138, 21,
]);

export function getCreateNftMintDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_NFT_MINT_DISCRIMINATOR
  );
}

export type CreateNftMintInstruction<
  TProgram extends string = typeof TEMPLE_PROGRAM_ADDRESS,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountNftMintAccount extends string | AccountMeta<string> = string,
  TAccountTempleConfig extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountNftMintAccount extends string
        ? WritableAccount<TAccountNftMintAccount>
        : TAccountNftMintAccount,
      TAccountTempleConfig extends string
        ? WritableAccount<TAccountTempleConfig>
        : TAccountTempleConfig,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CreateNftMintInstructionData = {
  discriminator: ReadonlyUint8Array;
  inceseId: number;
  configId: number;
};

export type CreateNftMintInstructionDataArgs = {
  inceseId: number;
  configId: number;
};

export function getCreateNftMintInstructionDataEncoder(): FixedSizeEncoder<CreateNftMintInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['inceseId', getU8Encoder()],
      ['configId', getU16Encoder()],
    ]),
    (value) => ({ ...value, discriminator: CREATE_NFT_MINT_DISCRIMINATOR })
  );
}

export function getCreateNftMintInstructionDataDecoder(): FixedSizeDecoder<CreateNftMintInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['inceseId', getU8Decoder()],
    ['configId', getU16Decoder()],
  ]);
}

export function getCreateNftMintInstructionDataCodec(): FixedSizeCodec<
  CreateNftMintInstructionDataArgs,
  CreateNftMintInstructionData
> {
  return combineCodec(
    getCreateNftMintInstructionDataEncoder(),
    getCreateNftMintInstructionDataDecoder()
  );
}

export type CreateNftMintAsyncInput<
  TAccountAuthority extends string = string,
  TAccountNftMintAccount extends string = string,
  TAccountTempleConfig extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  authority: TransactionSigner<TAccountAuthority>;
  /** nft mint */
  nftMintAccount: Address<TAccountNftMintAccount>;
  templeConfig?: Address<TAccountTempleConfig>;
  systemProgram?: Address<TAccountSystemProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  inceseId: CreateNftMintInstructionDataArgs['inceseId'];
  configId: CreateNftMintInstructionDataArgs['configId'];
};

export async function getCreateNftMintInstructionAsync<
  TAccountAuthority extends string,
  TAccountNftMintAccount extends string,
  TAccountTempleConfig extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof TEMPLE_PROGRAM_ADDRESS,
>(
  input: CreateNftMintAsyncInput<
    TAccountAuthority,
    TAccountNftMintAccount,
    TAccountTempleConfig,
    TAccountSystemProgram,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CreateNftMintInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountNftMintAccount,
    TAccountTempleConfig,
    TAccountSystemProgram,
    TAccountTokenProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? TEMPLE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: true },
    nftMintAccount: { value: input.nftMintAccount ?? null, isWritable: true },
    templeConfig: { value: input.templeConfig ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.templeConfig.value) {
    accounts.templeConfig.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([116, 101, 109, 112, 108, 101, 95, 118, 49])
        ),
        getU16Encoder().encode(expectSome(args.configId)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.nftMintAccount),
      getAccountMeta(accounts.templeConfig),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getCreateNftMintInstructionDataEncoder().encode(
      args as CreateNftMintInstructionDataArgs
    ),
  } as CreateNftMintInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountNftMintAccount,
    TAccountTempleConfig,
    TAccountSystemProgram,
    TAccountTokenProgram
  >;

  return instruction;
}

export type CreateNftMintInput<
  TAccountAuthority extends string = string,
  TAccountNftMintAccount extends string = string,
  TAccountTempleConfig extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  authority: TransactionSigner<TAccountAuthority>;
  /** nft mint */
  nftMintAccount: Address<TAccountNftMintAccount>;
  templeConfig: Address<TAccountTempleConfig>;
  systemProgram?: Address<TAccountSystemProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  inceseId: CreateNftMintInstructionDataArgs['inceseId'];
  configId: CreateNftMintInstructionDataArgs['configId'];
};

export function getCreateNftMintInstruction<
  TAccountAuthority extends string,
  TAccountNftMintAccount extends string,
  TAccountTempleConfig extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof TEMPLE_PROGRAM_ADDRESS,
>(
  input: CreateNftMintInput<
    TAccountAuthority,
    TAccountNftMintAccount,
    TAccountTempleConfig,
    TAccountSystemProgram,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CreateNftMintInstruction<
  TProgramAddress,
  TAccountAuthority,
  TAccountNftMintAccount,
  TAccountTempleConfig,
  TAccountSystemProgram,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? TEMPLE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: true },
    nftMintAccount: { value: input.nftMintAccount ?? null, isWritable: true },
    templeConfig: { value: input.templeConfig ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.nftMintAccount),
      getAccountMeta(accounts.templeConfig),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getCreateNftMintInstructionDataEncoder().encode(
      args as CreateNftMintInstructionDataArgs
    ),
  } as CreateNftMintInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountNftMintAccount,
    TAccountTempleConfig,
    TAccountSystemProgram,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedCreateNftMintInstruction<
  TProgram extends string = typeof TEMPLE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    authority: TAccountMetas[0];
    /** nft mint */
    nftMintAccount: TAccountMetas[1];
    templeConfig: TAccountMetas[2];
    systemProgram: TAccountMetas[3];
    tokenProgram: TAccountMetas[4];
  };
  data: CreateNftMintInstructionData;
};

export function parseCreateNftMintInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCreateNftMintInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      authority: getNextAccount(),
      nftMintAccount: getNextAccount(),
      templeConfig: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getCreateNftMintInstructionDataDecoder().decode(instruction.data),
  };
}
